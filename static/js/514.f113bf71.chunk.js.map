{"version":3,"file":"static/js/514.f113bf71.chunk.js","mappings":"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","sources":["components/AlertMe.jsx","components/ModalMe.jsx","components/NavBar.jsx","components/TableMe.jsx","pages/landing/HomePage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nfunction AlertMe({ total, showModalFn }) {\r\n  return (\r\n    <Alert variant={\"dark\"}>\r\n      <h2>\r\n        {`Gross Total `}\r\n        <Button variant=\"dark\" size=\"lg\" onClick={(e) => showModalFn(true)}>\r\n          <b>{total}</b>\r\n        </Button>\r\n      </h2>\r\n    </Alert>\r\n  );\r\n}\r\n\r\nexport default AlertMe;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nfunction ModalMe({ grossTotal = 0, showModalFn }) {\r\n  const [multiple, setMutiple] = useState(\"\");\r\n\r\n  return (\r\n    <Modal.Dialog size=\"xl\">\r\n      <Modal.Header>\r\n        <Modal.Title>Multiple Total</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <InputGroup size=\"md\">\r\n          <FormControl\r\n            aria-label=\"Small\"\r\n            value={grossTotal}\r\n            id={`ModalMe_grossTotalId`}\r\n            type=\"number\"\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n      </Modal.Body>\r\n      <Modal.Body>\r\n        <InputGroup size=\"md\">\r\n          <FormControl\r\n            aria-label=\"Small\"\r\n            value={multiple}\r\n            id={`ModalMe_multipleTotalId`}\r\n            type=\"number\"\r\n            onChange={(e) => setMutiple(e?.target?.value)}\r\n          />\r\n        </InputGroup>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Modal.Body>\r\n          <InputGroup size=\"md\">\r\n            <FormControl\r\n              aria-label=\"Small\"\r\n              value={grossTotal * multiple}\r\n              id={`ModalMe_TotalId`}\r\n              type=\"number\"\r\n              readOnly\r\n              placeholder=\"Total\"\r\n            />\r\n          </InputGroup>\r\n        </Modal.Body>\r\n        <Button variant=\"secondary\" onClick={(e) => showModalFn(false)}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal.Dialog>\r\n  );\r\n}\r\n\r\nexport default ModalMe;\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport AlertMe from \"./AlertMe\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nfunction NavBar({ total = 0, title= \"Matheasy\", showModalFn }) {\r\n  return (\r\n    <Navbar bg=\"primary\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">\r\n          <Row>\r\n            <Col sm={6}>\r\n              <Badge bg=\"primary\">{title}</Badge>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm={12}>\r\n              <AlertMe total={total} showModalFn={showModalFn} />\r\n            </Col>\r\n          </Row>\r\n        </Navbar.Brand>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { generate } from \"shortid\";\r\n\r\nfunction TableMe({ updateGrossTotalFn, isActive }) {\r\n  const [tableData, setTableData] = useState([\r\n    { id: generate(), weight: 0, quantity: 0, total: 0 },\r\n  ]);\r\n\r\n  const calculate = (e, element) => {\r\n    e && e.preventDefault();\r\n    let grossTotal = 0;\r\n    if (e?.target?.id && element) {\r\n      const updatedTable = tableData.map((data) => {\r\n        if (data?.id === e?.target?.id) {\r\n          let value = parseFloat(e.target.value);\r\n          value = value > 0 ? value : 0;\r\n          data[element] = value;\r\n          data.total =\r\n            \"weight\" === element ? value * data.quantity : value * data.weight;\r\n        }\r\n\r\n        grossTotal += data.total;\r\n        return data;\r\n      });\r\n      const lastRow = updatedTable[updatedTable.length - 1];\r\n      if (lastRow?.weight > 0 || lastRow?.quantity > 0) {\r\n        updatedTable.push({ id: generate(), weight: 0, quantity: 0, total: 0 });\r\n      }\r\n\r\n      setTableData(updatedTable);\r\n      if (updateGrossTotalFn) {\r\n        updateGrossTotalFn(grossTotal);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDelete = (e) => {\r\n    e && e.preventDefault();\r\n    const id = e?.target?.id;\r\n    if (id) {\r\n      const foundIndex = tableData.findIndex((value) => id === value?.id);\r\n      if (foundIndex >= 0) {\r\n        if (updateGrossTotalFn) {\r\n          let grossTotal = 0;\r\n          const newData = [];\r\n          tableData.forEach((data, index) => {\r\n            if (index !== foundIndex) {\r\n              newData.push(data);\r\n              grossTotal += data.total;\r\n            }\r\n          });\r\n          setTableData(newData);\r\n          updateGrossTotalFn(grossTotal);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!isActive) return <></>;\r\n\r\n  return (\r\n    <Table striped bordered hover size=\"sm\" variant=\"light\" responsive=\"sm\">\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Weight</th>\r\n          <th>Quantity</th>\r\n          <th>Total</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Array.isArray(tableData) &&\r\n          tableData.map((eachData, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <td>{index + 1}</td>\r\n                <td>\r\n                  <>\r\n                    <InputGroup size=\"sm\">\r\n                      <FormControl\r\n                        aria-label=\"Small\"\r\n                        value={`` + eachData?.weight}\r\n                        id={eachData?.id}\r\n                        onChange={(e) => calculate(e, \"weight\")}\r\n                        type=\"number\"\r\n                      />\r\n                    </InputGroup>\r\n                  </>\r\n                </td>\r\n                <td>\r\n                  <>\r\n                    <InputGroup size=\"sm\">\r\n                      <FormControl\r\n                        aria-label=\"Small\"\r\n                        value={`` + eachData?.quantity}\r\n                        id={eachData?.id}\r\n                        onChange={(e) => calculate(e, \"quantity\")}\r\n                        type=\"number\"\r\n                      />\r\n                    </InputGroup>\r\n                  </>\r\n                </td>\r\n                <td>\r\n                  <>\r\n                    <InputGroup size=\"sm\">\r\n                      <FormControl\r\n                        aria-label=\"Small\"\r\n                        value={eachData?.total}\r\n                        readOnly\r\n                      />\r\n                    </InputGroup>\r\n                  </>\r\n                </td>\r\n                <td>\r\n                  <>\r\n                    {eachData?.weight > 0 || eachData?.quantity > 0 ? (\r\n                      <Button\r\n                        variant=\"secondary\"\r\n                        id={eachData?.id}\r\n                        onClick={onDelete}\r\n                      >\r\n                        -\r\n                      </Button>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default TableMe;\r\n","import React, { useState } from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport AlertMe from \"../../components/AlertMe\";\r\nimport ModalMe from \"../../components/ModalMe\";\r\nimport NavBar from \"../../components/NavBar\";\r\nimport TableMe from \"../../components/TableMe\";\r\n\r\nfunction HomePage() {\r\n  const [grossTotal, setGrossTotal] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <NavBar total={grossTotal} showModalFn={setShowModal} />\r\n        </Col>\r\n      </Row>\r\n      {showModal ? (\r\n        <Row>\r\n          <Col sm={12}>\r\n            <ModalMe grossTotal={grossTotal} showModalFn={setShowModal} />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <Row>\r\n        <Col sm={12}>\r\n          <TableMe\r\n            updateGrossTotalFn={(total) => setGrossTotal(total)}\r\n            isActive={!showModal}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      {showModal ? (\r\n        <></>\r\n      ) : (\r\n        <Col sm={12}>\r\n          <AlertMe total={grossTotal} showModalFn={setShowModal} />\r\n        </Col>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n"],"names":["total","showModalFn","Alert","variant","Button","size","onClick","e","grossTotal","useState","multiple","setMutiple","Modal","InputGroup","FormControl","value","id","type","readOnly","onChange","target","placeholder","title","Navbar","bg","Container","href","Row","Col","sm","Badge","updateGrossTotalFn","isActive","generate","weight","quantity","tableData","setTableData","calculate","element","preventDefault","updatedTable","map","data","parseFloat","lastRow","length","push","onDelete","foundIndex","findIndex","newData","forEach","index","Table","striped","bordered","hover","responsive","Array","isArray","eachData","setGrossTotal","showModal","setShowModal"],"sourceRoot":""}